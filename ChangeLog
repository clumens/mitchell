current
=======
Compiler frontend:
- Added column numbers to error reporting.
- Added -last-phase to halt compilation early.
Grammar:
- Added escape sequences into string literals.
- Allow functions to return record values for element reference.
Internals:
- Use generic linked list code throughout the AST.  This removes the
  absyn_decl_lst_t, absyn_expr_lst_t, and absyn_module_lst_t structures.

mitchell preview 3
==================
Compiler frontend:
- Don't dump the abstract syntax by default, and also add an option to dump to
  standard out.
- Added an option to dump the symbol tables that works like the absyn dumping
  option.
Grammar:
- Lists of lists (and even more complicated types) are now allowed by the
  grammar and recognized by the parser.Â  It was a grammar error that they were
  not recognized to begin with.
- Lists are now specified as "list integer" instead of "integer list", because
  this makes the grammar much easier.
- Elements from a record are now accessed via the "pipe" character instead of
  overloading the period from module access.
Internals:
- The singly-ty production has been removed, and the absyn_ty_t struct has
  been redesigned to be less crappy.
- Renamed absyn_record_lst_t to absyn_record_assn_t to more closely match the
  other names.
- Added absyn_record_ref_t to the AST to represent element access.
- Various minor renamings to make things more clear.
- Beginning to work in my generic list code, but only in a few test places.
- Added in a strict type checker.


mitchell preview 2
==================
Compiler frontend:
- Added an option to dump the abstract syntax.
- Check for a UTF-8 aware locale on startup and bail if one is not found.
Grammar:
- Allow nested modules, though modules may only be declared inside each other,
  and not in places like functions or decls.
- Removed prototype sections from module declarations in order to support
  nested modules.  Visibility declarations still to follow.
- Added an ELSE branch to the case expression.
- Removed constants and renamed variables to values, since I realized that's
  what they really are.
Internals:
- Build an abstract syntax tree from the grammar as we parse it.
- Link against Boehm's GC library so I have less memory management crud to
  deal with.
Misc:
- Added a syntax highlighting file for vim.
