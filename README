

                         Readme for the Mitchell

                    Programming Language and Compiler

                             by Chris Lumens



1. Introduction
===============
This is the readme for the Mitchell programming language and the reference
compiler for that language.  Mitchell is a special-purpose language that
exists only for bootstrapping purposes.  That is, the Mitchell compiler
definition will eventually contain only the features required to rewrite
the compiler in itself.  The runtime library will likewise have only the
features required for bootstrap.

While bootstrapping is the primary design decision, the language should
still contain enough features to be used as a general-purpose language.
However, there are no guarantees about the language or runtime definition.
Features may be added or removed at any time throughout development.  So
for anyone who might want to use Mitchell for their own project, you have
been warned.  Despite this lack of guarantee, the compiler and runtime
will follow the syntax and semantics definitions included with the source
distribution.  There is just no guarantee that those definitions will
remain constant.

The current status of Mitchell is limited to front-end functionality only.
It can check the syntax of an input source code file, construct an
abstract syntax tree based on that input, and check the validity of types
in that tree.  It cannot yet actually compile anythin to an executable
state.


2. Features
===========
The following are features of the Mitchell language and compiler:

   * All Unicode characters are valid identifiers.  In fact, several
     Unicode characters are already defined by the language.  Make sure
     you have your terminal and editor set up right.  See the grammar for
     specifics of which characters are defined.

   * The syntax unit is the expression.  In fact, the entire language is
     built around using expressions instead of long expression sequences.
     Additionally, each expression carries a type with it and expressions
     can be used in all sorts of places you may not be used to.  This is
     similar to how things are done in functional languages, though I do
     not aspire to that level of sophistication.

   * All code is packaged in modules to aid modularity and reuse.  Modules
     may be nested inside each other for further modularity.

   * Almost everything is a function - including arithmetic and boolean
     operators.  Looping is also done via tail recursion instead of a for
     and while loop construct.  Again, this is functional in style though
     not nearly as complicated.  The idea is keeping the syntax as simple
     as possible.

   * Strict type checking promotes type safety and prevents various
     classes of errors in programs.


3. Build and Installation
=========================

3.1. Requirements
-----------------
The following components are required to build the mitchell compiler:

   * gcc-3.4.x - Required to have the proper wide character support
                 http://gcc.gnu.org

   * Boehm GC library - Garbage collection library for C
                        http://www.hpl.hp.com/personal/Hans_Boehm/gc/

3.2. Building 
-------------
Building the Mitchell compiler is easy:

   # make

You can make a debugging build (debugging for the compiler, not your
programs) like so:

   # make DEBUG=1

If you would like to run the automated test suite, all you need to do is:

   # make test

All tests should be reported as passing.  Even tests that are supposed to
fail should report "PASS" as long as they behaved as expected.  Any
failures are either due to an incorrect $LANG setting (see the man page)
or are an actual bug in the compiler.

The built compiler may then be found in src/kern.  There is currently no
installation target due to the current limited functionality of the
compiler.  It's nothing you would want to install As the compiler becomes
more featured, so will the build and installation process.  Additionally,
there is currently no way to customize the build process for different
options or build flags.

3.3. Test Case Status
---------------------
Test cases which call standard library functions, use empty lists, or use
mutually recursive modules will currently FAIL because they are not
handled in the type checker.


4. Other Documentation
======================
The docs directory contains some additional documentation for this system.
In particular, the grammar file describes the exact syntax of source files
recognized by the compiler.  Examples may be found in the tests directory.
Additionally, the man page describes exact usage of the compiler including
all command line options.


5. License
==========
Mitchell is distributed under the terms of the GPL, a copy of which may be
found in the COPYING file in the top level of this source distribution.
