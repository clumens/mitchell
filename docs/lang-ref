

                       Mitchell Language Reference

                             by Chris Lumens


<TABLE OF CONTENTS GO HERE>


1. Introduction
===============
This document is intended to be a reference to the Mitchell programming
language.  It is not a tutorial, nor does it explain how to use the
compiler.  It also assumes the reader already knows a programming language
and so does not spend any time introducing programming in general.  This
reference is not the authoritative definition of the language - see the
semantics documents provided in the distribution for that.  In any
discrepancies between the definition and this reference, the definition is
correct.

What this document does is explain the language in more simple and less
mathematical terms to experienced programmers.  It is meant to serve as an
introduction to the Mitchell programming language.


2. Types
========
Mitchell has a few types.  The most basic types are boolean, integer,
string, and ⊥.  These types may be thought of as atomic - they don't break
down into anything more simple.  Mitchell also defines three more
complicated types:  lists, records, and exceptions.  Finally, mitchell
allows module to define their own types as aliases to preexisting types
or using unions.

Mitchell is strictly type checked.  That is, there is no implicit
conversion from one type to another based on context.  All expressions
must return value of a defined type and these types must match the
declarations given.  See the typing file for the type rules used.

2.1. boolean
------------
The boolean type expresses truth.  This type contains two values which use
the following literals:

   * f - False
   * t - True

Operations on boolean values will be handled by the Boolean module.

2.2. integer
------------
The integer type holds non-negative 32-bit integers.  This allows the
expressable range of numbers to be 0 - 4294967295.  There is no way to
express negative numbers or numbers with decimal points, since these are
not required in the implementation of a compiler.  Additionally, there is
no way to express an integer in anything but base-10.

Operations on integer values will be handled by the Integer module.

2.3. string
-----------
The string type consists of any number of Unicode characters surrounded by
double quote marks.  Strings may optionally be empty.  String literals may
extend across multiple lines, in which case the newline is part of the
string literal.  For convenience, string literals may also contain the
following escape sequences:

   * \n - Embed a newline into the string.
   * \t - Embed a tab into the string.
   * \\ - Embed a literal backslash into the string.
   * \" - Embed a literal double quote into the string.
   * \uXXXX - Embed the Unicode character given by the four hex digits
              XXXX into the string.

Strings may also be continued across multiple lines.  To do this, place a
backslash at the end of a line inside the string, followed immediately by
a newline.  Then on the following line, place a second backslash
immediately before the first character from that line you would like to be
included in the string.  For instance, the string:

   ʋ str: string ← "This string spans\
                    \ multiple lines"

is converted into the following:

   ʋ str: string ← "This string spans multiple lines"

Operations on string values will be handled by the String module.

2.4. ⊥
------
The ⊥ (or "bottom") type conveys no type information.  It should only be
used as the return type of functions that do not return anything
important.  For instance, a string printing function might not return any
interesting return value so would have a return type of bottom.

There are no valid operations on the bottom type.

2.5. list
---------
The list type is not a basic type - it is composed out of another type.
Essentially, the list type defines a collection of values of some other
type.  All elements of a list must be of the same type - these are
monomorphic lists, not like those found in Scheme.  Values in the list
have no special initial ordering other than that they are stored in the
order of assignment.  List literals consist of a comma-separated list of
expressions surrounded by square brackets.  For instance:

   [0, 1, 2, 3]

Two list types are equivalent if the types of the underlying types are
equivalent.

Operations on lists will be handled by the List module.

2.6. record
-----------
The record type is not a basic type - it may be composed of several
different elements of any previously defined type.  Each element in a
record type is given an identifier, and this identifier must be unique to
the record type.  Two record types may have the same set of element
identifiers, however.  Elements in a record have no special ordering.
Record literals consist of a comma-separated list of assignments
surrounded by braces.  For instance:

   { a ← 47, b ← "asdf" }

Two record types are equivalent if they have the same named elements with
equivalent types.  Order of the elements does not matter in equivalence.

There are no valid operations on record types except for element access,
provided by the | operator.

2.7. exception
--------------
Exceptions provide a convenient way for handling errors in program
execution.  They provide a mechanism for attaching arbitrary values to an
error condition, handling this condition wherever the programmer wants,
and allowing program execution to continue on without too much
difficulty.  This is much more flexible than the common return value
or errno values seen in languages like C, though it does comes with a
certain amount of complexity.

Exceptions are a special type in Mitchell, though they look syntactically
just like a record.  Exception types hold several named values of already
defined types.  The names must be unique within a single exception type,
and the order names are listed in does not matter.  Once an exception
type is declared, new values of this type may be created in the normal
manner.  Exception values are then just like regular values - they may be
created, passed as function parameters, and returned from expressions.
It is not until an exception value is raised that anything special
happens.

Raised exceptions must be handled at some point in program execution.  If
the programmer does not specify a valid exception handler, the exception
will be handled at the top level by the runtime environment, immediately
halting execution.

Exception values may be manipulated with the Exception module.

2.8. union
----------


3. Expressions
==============
The expression is the most important unit of syntax in the Mitchell
language.  An expression is a statement that returns a value with a
specific type.  Statements, on the other hand, have no value or type.
Unlike most popular programming languages, Mitchell uses expressions much
more extensively than statements.  This can make for some interesting
possibilities though the programmer must also be careful with the typing.

3.1. case Expressions
---------------------
case-expr = case-symbol test-expr in-symbol branch-lst end-symbol

branch-lst = branch-test-expr mapsto-symbol result-expr (comma-symbol branch-lst)?
           | else-symbol mapsto-symbol default-expr

branch-test-expr = id
                 | id lparen-symbol name-lst? rparen-symbol
                 | integer-symbol
                 | string-symbol
                 | boolean-symbol

name-lst = identifier-symbol (comma-symbol, identifier-symbol)*

test-expr = expr

result-expr = expr

default-expr = expr

The case expression is a rather complex piece of syntax.  It consists of a
test expression and a list of branches.  Each branch in the list consists
of a branch test expression and a result expression.  Branches are
separated by commas.

First, the test expression is evaluated.  Then, each branch test
expression in the list is evaluated until one is found that matches the
result of the test expression.  For this reason, all test expressions must
have the same type.  When a matching result is found, the result
expression is evaluated and that value and type is returned for the entire
case expression.  All result expressions must have the same type.

The allowed types for the test expressions are limited to integers, booleans,
strings, and unions.  There is no restriction on the type of the result
expressions.  If the test expressions are unions, the syntax gets a little
more complicated.  In the test expression, you must specify the constructor
of the union being specified, followed by a comma-separated list of
identifiers if the constructor is more than just a name.  Each identifier
will be bound to one value of the constructor in a new environment that
exists just for the corresponding result expression.

The case expression may also include a default expression.  If no branch
test expressions match, the default expression becomes the result of the
case.  This default is not required, however.  If the compiler is unable
to determine at compile time that all possibilities for the result of the
test expression are covered by the branches, an error will occur.


3.2. decl Expressions
---------------------
decl-expr = decl-symbol decl+ in-symbol expr end-symbol

decl = ty-decl | val-decl | fun-decl

The decl expression creates a new level of lexical scope.  The definitions
contained in decl-lst may includes types, exceptions, functions, and
values.  Modules are not accepted in the decl-expr.  These definitions
only exist through the end of the expression.  After evaluating all value
definitions found in the decl-lst and updating the environment with these
definitions, the expr is evaluated.  The type of the expr is the type of
the entire expression and the value is returned as the value of the entire
expression.

3.3. if-then-else Expressions
-----------------------------
if-expr = if-symbol test-expr then-symbol then-expr else-symbol else-expr

test-expr = expr

then-expr = expr

else-expr = expr

The if-then-else expression is different from similar forms found in other
programming languages.  Since this is an expression, it must return a
value with a particular type.  For this reason, both the then and else
branches must be included.  If the else was not required, then the
expression may not return a value.  Therefore, this is not allowed.  A
nice side effect of this is that there is no ambiguity regarding nested
if-then-else expressions as is found in C.

The test-expr must evaluate to a boolean type, and both the then-expr and
the else-expr must evaluate to the same type.  This type will be the type
of the entire expression.

3.4. Symbol References
----------------------

3.5. raise Expressions
----------------------
raise-expr = raise-symbol expr

The raise expression causes an exception to be raised immediately.  The
form of this expression is unusually flexible in that it raises the
result of any expression.  Of course, the expression must evaluate to a
value of an exception type.

When an exception is raised, program execution immediately changes.
Instead of following the normal course of execution, the exception begins
propagating up from the raise expression to the top level.  At each point
along the way, a check is performed for an exception handler.  If an
exception handler is found that can handle exceptions of the type raised,
the handler is run and execution continues on from that point.
Otherwise, the exception is propagated up to the next caller in the
execution stack.  If the exception reaches the top without being handled,
a runtime error occurs and execution halts.

3.6. Literal Expressions
------------------------

3.7. Exception Handlers
-----------------------
handle-expr = handle-symbol exn-lst end-symbol

exn-lst = id identifier-symbol mapsto-symbol expr (comma-symbol exn-lst)?
        | else-symbol identifier-symbol mapsto-symbol expr

Exception handlers may be specified immediately after any valid
expression.  These constructs may handle any kind of exception, given by
name as the id.  Several handlers may be specified in a comma separated
list, as well as a default handler.  This is similar in style to the case
expression.

When an exception reaches a handle expression, each id in the list is
checked to see if it matches the type of the exception raised.  If so,
the matching expression is executed.  If no handler matches but a default
is given, the default expression is executed.  In any of these cases,
program execution continues with the next expression after the exception
handlers.  If there is no default, the exception propagates up to the
next caller in the call stack.

The types of all handling expressions must be the same, even though the
types of the exceptions will not be.  In addition, each handling
expression must have the same type as the expression it follow, as the
value returned by the handler will become the value of the expression.


4. Declarations
===============

4.1. Type Declarations
----------------------

4.2. Value Declarations
-----------------------

4.3. Function Declarations
--------------------------

4.4. Module Declarations
------------------------

4.5. absorb Statement
---------------------
absorb-stmt = absorb-symbol id

The absorb statement is a convenient piece of syntax that lets you not
have to do as much typing.  absorb takes an identifier that is a module
name, and puts all its symbols into the symbol table of the current scope.
That is, it makes the values, types, functions, modules, and exceptions
defined in that module look as if they are defined locally, saving you
from having to type the module name before each identifier.  So instead of
typing:

   Integer.+ (a, b)

you could instead type:

   absorb Integer
   + (a, b)

This pays off most when you have a lot of method calls into the same
module.  absorb may be used anywhere declarations can be defined.  Placing
it in a module-level could work well.  Note that the bindings imported
from the module are only available after absorb is used, and that they
will override anything you have already defined.  When the current level
of scope ends, so does the effects of absorb.


5. Modules
==========
